version: '3.7'

volumes:
  kong_data: {}

networks:
  kong-net:
    external: false

services:

  kongdb:
    image: "postgres:9.6"
    environment:
      # POSTGRES_DB: ${KONG_PG_DATABASE:-kong}
      POSTGRES_USER: ${KONG_PG_USER:-kong}
      POSTGRES_PASSWORD_FILE: /run/secrets/kong_postgres_password
      POSTGRES_HOST_AUTH_METHOD: trust
    secrets:
      - kong_postgres_password
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "${KONG_PG_USER:-kong}"]
      interval: 30s
      timeout: 30s
      retries: 3
    restart: "on-failure"
    deploy:
      restart_policy:
        condition: "on-failure"
    networks:
      - "kong-net"
    # ports:
    #   - "5432:5432/tcp"
    volumes:
      - kong_data:/var/lib/postgresql/data

  kong-migration:
    image: "${KONG_DOCKER_TAG:-kong:latest}"
    command: kong migrations bootstrap
    depends_on:
      - "kongdb"
    environment:
      KONG_DATABASE: postgres
      KONG_PG_DATABASE: ${KONG_PG_DATABASE:-kong}
      KONG_PG_HOST: "kongdb"
      KONG_PG_USER: ${KONG_PG_USER:-kong}
      KONG_PG_PASSWORD_FILE: /run/secrets/kong_postgres_password
    secrets:
      - kong_postgres_password
    networks:
      - "kong-net"
    restart: "on-failure"
    deploy:
      restart_policy:
        condition: "on-failure"

  kong-migrations-up:
    image: "${KONG_DOCKER_TAG:-kong:latest}"
    command: kong migrations up && kong migrations finish
    depends_on:
      - "kong-migration"
    environment:
      KONG_DATABASE: postgres
      KONG_PG_DATABASE: ${KONG_PG_DATABASE:-kong}
      KONG_PG_HOST: "kongdb"
      KONG_PG_USER: ${KONG_PG_USER:-kong}
      KONG_PG_PASSWORD_FILE: /run/secrets/kong_postgres_password
    secrets:
      - kong_postgres_password
    networks:
      - kong-net
    restart: "on-failure"
    deploy:
      restart_policy:
        condition: "on-failure"

  kong:
    image: "${KONG_DOCKER_TAG:-kong:latest}"
    user: "${KONG_USER:-kong}"
    depends_on:
      - "kong-migrations-up"
    environment:
      KONG_ADMIN_ACCESS_LOG: "/dev/stdout"
      KONG_ADMIN_ERROR_LOG: "/dev/stderr"
      KONG_ADMIN_LISTEN: "0.0.0.0:8001"
      KONG_CASSANDRA_CONTACT_POINTS: "kongdb"
      KONG_DATABASE: postgres
      KONG_PG_DATABASE: ${KONG_PG_DATABASE:-kong}
      KONG_PG_HOST: "kongdb"
      KONG_PG_USER: ${KONG_PG_USER:-kong}
      KONG_PG_PASSWORD_FILE: /run/secrets/kong_postgres_password
      KONG_PROXY_ACCESS_LOG: /dev/stdout
      KONG_PROXY_ERROR_LOG: /dev/stderr
      KONG_PROXY_LISTEN: '0.0.0.0:8000, 0.0.0.0:8443 ssl'
      KONG_NGINX_HTTP_INCLUDE: "/usr/local/kong/nginx-include.conf"
    secrets:
      - kong_postgres_password
    networks:
      - kong-net
    ports:
      - "8000:8000/tcp"
      - "127.0.0.1:8001:8001/tcp"
      - "443:8443/tcp"
      - "127.0.0.1:8444:8444/tcp"
      - "80:8080/tcp"
    healthcheck:
      test: ["CMD", "kong", "health"]
      interval: 10s
      timeout: 10s
      retries: 10
    restart: "always"
    deploy:
      restart_policy:
        condition: "always"
    volumes:
      - "./nginx-include.conf:/usr/local/kong/nginx-include.conf"
      # - "/etc/localtime:/etc/localtime:ro"

  konga-prepare:
    image: "pantsel/konga:latest"
    command: "-c prepare -a postgres -u postgresql://kong@kongdb:5432/konga"
    networks:
      - "kong-net"
    restart: "on-failure"
    deploy:
      restart_policy:
        condition: "on-failure"
    depends_on:
      - "kongdb"

  konga:
    image: "pantsel/konga:latest"
    environment:
      # TOKEN_SECRET: km1GUr4RkcQD7DewhJPNXrCuZwcKmqjb
      DB_ADAPTER: postgres
      DB_HOST: kongdb
      DB_PORT: 5432
      DB_USER: ${KONG_PG_USER:-kong}
      DB_PASSWORD_FILE: /run/secrets/kong_postgres_password
      KONGA_LOG_LEVEL: "debug"
      DB_DATABASE: ${KONGA_PG_DATABASE:-konga}
      NODE_ENV: production
    secrets:
      - kong_postgres_password
    networks:
      - "kong-net"
    restart: "always"
    deploy:
      restart_policy:
        condition: "always"
    depends_on:
      - "konga-prepare"
    ports:
      - "1337:1337/tcp"

secrets:
  kong_postgres_password:
    file: ./KONG_POSTGRES_PASSWORD